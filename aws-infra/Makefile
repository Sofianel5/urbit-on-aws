VARS=-var-file=terraform.tfvars
TF_PLAN=./terraform.plan

terraform.tfvars: ../config.mk
	@if [ -z "$(AWS_PROFILE)" ]; then echo 'need $$AWS_PROFILE set - run from root' && exit 1; fi
	@if [ -z "$(AWS_REGION)" ]; then echo 'need $$AWS_REGION set - run from root' && exit 1; fi
	@if [ -z "$(SSH_KEY_NAME)" ]; then echo 'need $$SSH_KEY_NAME set - run from root' && exit 1; fi
	@if [ -z "$(SSH_KEY_PATH)" ]; then echo 'need $$SSH_KEY_PATH set - run from root' && exit 1; fi
	@if [ -z "$(GENERATE_NEW_AWS_KEY_PAIR)" ]; then echo 'need $$GENERATE_NEW_AWS_KEY_PAIR set - run from root' && exit 1; fi
	@rm -rf $@
	@echo '# do not edit. this file was auto-generated by make' >> $@
	@echo 'aws_profile = "$(AWS_PROFILE)"' >> $@
	@echo 'aws_region = "$(AWS_REGION)"' >> $@
	@echo 'ssh_key_name = "$(SSH_KEY_NAME)"' >> $@
	@echo 'ssh_key_path = "../$(SSH_KEY_PATH)"' >> $@
	@echo 'generate_new_aws_key_pair = $(GENERATE_NEW_AWS_KEY_PAIR)' >> $@
	@echo 'output_config_path = "../aws-ship/backend.config"' >> $@

init: terraform.tfvars
	terraform init

plan: init
	terraform plan $(VARS) -out=$(TF_PLAN)

apply:
	terraform apply -auto-approve $(TF_PLAN)

plan-destroy:
	terraform plan -destroy $(VARS) -out=$(TF_PLAN)

destroy:
	terraform destroy $(VARS)

.PHONY: init plan apply plan-destroy destroy
